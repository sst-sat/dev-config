// Place your key bindings in this file to override the defaults
[
    {
        "command": "workbench.action.toggleSidebarVisibility",
        "key": "alt+b",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.files.action.focusFilesExplorer",
        "key": "ctrl+e",
        "when": "editorTextFocus"
    },
    {
        "key": "n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "command": "renameFile",
        "key": "r",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+n",
        "command": "explorer.newFolder",
        "when": "explorerViewletFocus"
    },
    {
        "command": "deleteFile",
        "key": "d",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "alt+e",
        "command": "calva-fmt.inferParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "alt+w",
        "command": "calva-fmt.formatCurrentForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !inlineSuggestionVisible && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "alt+q",
        "command": "calva-fmt.alignCurrentForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "alt+left",
        "command": "calva-fmt.tabDedent",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "alt+right",
        "command": "calva-fmt.tabIndent",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "alt+f",
        "command": "calva.jackIn",
        "when": "calva:keybindingsEnabled && workspaceFolderCount > 0"
    },
    {
        "key": "alt+g",
        "command": "calva.connectNonProjectREPL",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "alt+1",
        "command": "calva.loadFile",
        "when": "calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "f4",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "f4",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "backspace",
        "command": "-paredit.deleteBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "delete",
        "command": "-paredit.deleteForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "ctrl+shift+alt+b",
        "command": "-paredit.dragSexprBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+oem_comma",
        "command": "-paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-paredit.convolute",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+up",
        "command": "-paredit.dragSexprBackward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+j",
        "command": "-paredit.dragSexprBackwardDown",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+u",
        "command": "-paredit.dragSexprBackwardUp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+f",
        "command": "-paredit.dragSexprForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+down",
        "command": "-paredit.dragSexprForward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+d",
        "command": "-paredit.dragSexprForwardDown",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+k",
        "command": "-paredit.dragSexprForwardUp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+right",
        "command": "-paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+backspace",
        "command": "-paredit.forceDeleteBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "alt+delete",
        "command": "-paredit.forceDeleteForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-paredit.joinSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+backspace",
        "command": "-paredit.killListBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+delete",
        "command": "-paredit.killListForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+k ctrl+h",
        "command": "-paredit.killLeft",
        "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-paredit.killRight",
        "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "-paredit.killSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+delete",
        "command": "-paredit.killSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+up",
        "command": "-paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+down",
        "command": "-paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+end",
        "command": "-paredit.closeList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+p ctrl+alt+r",
        "command": "-paredit.raiseSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r ctrl+alt+q",
        "command": "-paredit.rewrapQuote",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r ctrl+alt+p",
        "command": "-paredit.rewrapParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r ctrl+alt+s",
        "command": "-paredit.rewrapSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r ctrl+alt+c",
        "command": "-paredit.rewrapCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r ctrl+alt+h",
        "command": "-paredit.rewrapSet",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+up",
        "command": "-paredit.selectBackwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+left",
        "command": "-paredit.selectBackwardSexp",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorAfterComment && !calva:cursorBeforeComment && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+home",
        "command": "-paredit.selectOpenList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-paredit.selectBackwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+c ctrl+s",
        "command": "-calva.selectCurrentForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+w space",
        "command": "-paredit.rangeForDefun",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-paredit.selectForwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-paredit.selectForwardSexp",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorAfterComment && !calva:cursorBeforeComment && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+end",
        "command": "-paredit.selectCloseList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+down",
        "command": "-paredit.selectForwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+k ctrl+shift+k",
        "command": "-paredit.selectRight",
        "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "-paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+backspace",
        "command": "-paredit.spliceSexpKillBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+delete",
        "command": "-paredit.spliceSexpKillForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+s",
        "command": "-paredit.spliceSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-paredit.splitSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+p ctrl+alt+m",
        "command": "-paredit.togglemode",
        "when": "calva:keybindingsEnabled && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+t",
        "command": "-paredit.transpose",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+q",
        "command": "-paredit.wrapAroundQuote",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "-paredit.wrapAroundParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+s",
        "command": "-paredit.wrapAroundSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+c",
        "command": "-paredit.wrapAroundCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+r c",
        "command": "-paredit.addRichComment",
        "when": "calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "tab",
        "command": "-calva-fmt.formatCurrentForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !inlineSuggestionVisible && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+i",
        "command": "-calva-fmt.tabIndent",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    // VIM BINDINGS
    {
        "key": "space f",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.quickOpen",
        //"args": "<Leader>f"
    },
    {
        "key": "shift+l",
        "when": "editorTextFocus && neovim.mode == normal",
        //"args": ":bprevious<cr>",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "shift+h",
        "when": "editorTextFocus && neovim.mode == normal",
        //"args": ":bnext<cr>",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "space v",
        "command": "editorTextFocus && workbench.action.splitEditor",
        "when": "editorTextFocus&&neovim.mode == 'normal'",
        // "args": ":vsplit"
    },
    {
        "key": "space s",
        "command": "editorTextFocus && workbench.action.splitEditorDown",
        "when": "editorTextFocus&&neovim.mode == 'normal'",
        // "args": ":split"
    },
    {
        "key": "space h",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "space j",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "space k",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "space l",
        "when": "editorTextFocus && neovim.mode ==  normal",
        "command": "workbench.action.focusRightGroup"
    },
    // NICE TO HAVE
    {
        "key": "space e",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "editor.action.formatDocument"
    },
    {
        "key": "space w",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "command": "workbench.action.files.save"
    },
    {
        "key": "space q",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "space right",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "space left",
        "when": "editorTextFocus && neovim.mode == normal",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
]